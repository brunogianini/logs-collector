name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: |
          echo "Compilando..."
          exit 1  # Simula erro

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run tests
        run: echo "Rodando testes..."

  collect-logs:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: ${{ failure() }}
    steps:
      - name: Fetch failed job steps from API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        run: |
          echo "Buscando jobs que falharam..."
          
          # Busca todos os jobs da run
          jobs_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/jobs")

          # Itera sobre jobs que falharam
          echo "$jobs_json" | jq -r '.jobs[] | select(.conclusion=="failure") | "\(.id) \(.name)"' \
          | while read job_id job_name; do
              echo ""
              echo "===== Logs do job: $job_name ====="

              # Busca os steps do job via API
              steps_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO/actions/jobs/$job_id")

              # Para cada step que falhou, imprime o nome e o log
              echo "$steps_json" | jq -r '.steps[] | select(.conclusion=="failure") | "---- Step: \(.name) ----\n\(.text_summary // "Sem log dispon√≠vel")\n"' 
            done
